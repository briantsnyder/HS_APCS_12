/**
 * A program to carry on conversations with a human user.
 *
 * Code adapted from work by Laurie White for the College Board.
 *
 * Brian Snyder
 * 1/15/18
 */
public class Magpie2
{
    /**
     * Get a default greeting
     * @return a greeting
     */
    public String getGreeting()
    {
        return "Hello, let's talk."; // greeting statement
    }

    /**
     * Gives a response to a user statement
     *
     * @param statement
     *            the user statement
     * @return a response based on the rules given
     */
    public String getResponse(String statement)
    {
        // uses findKeyWord() to see if the keyword is said or only a part of something else
        // nested if else is used so responses higher on the list will be given priority to others, even if both keywords are mention
        // example: even if "no" and "mother" are both said, "no" response is before so program will respond with that
        String response = "";
        if (statement.trim().length() < 1) {
            response = "Say something, please"; // if user does not say anything
        } 
        else if (findKeyword(statement, "no") != -1) 
        {
            response = "Why so negative?"; // if the user syas "no"
        }
        else if (findKeyword(statement, "mother") != -1
                || findKeyword(statement, "father") != -1
                || findKeyword(statement, "sister") != -1
                || findKeyword(statement, "brother") != -1)
        {
            response = "Tell me more about your family."; // if the user mentions a family member
        }
        else if (findKeyword(statement, "dog") != -1 
                || findKeyword(statement, "cat") != -1) 
        {
            response = "Tell me more about your pets"; // if the user mentions a pet
        }
        else if (findKeyword(statement, "Mr. Hornish") != -1) 
        {
            response = "He sounds like a good teacher"; // if the user mentions a teacher
        }
        else if (findKeyword(statement, "Trump") != -1)
        {
            response = "I don't like to get political"; // if the user mentions the president
        }
        else if (findKeyword(statement, "ball") != -1)
        {
            response = "Tell me more about your favorite sport"; // if the user mentions "ball"
        }
        else if (findKeyword(statement, "skynet") != -1)
        {
            response = "No comment"; // if the user mentions "skynet"
        }
        else
        {
            response = getRandomResponse(); // otherwise a random response is returned 
        }
        return response;
    }

    /**
     * Pick a default response to use if nothing else fits.
     * @return a non-committal string
     */
    private String getRandomResponse()
    {
        final int NUMBER_OF_RESPONSES = 6; 
        double r = Math.random();
        int whichResponse = (int)(r * NUMBER_OF_RESPONSES); // can return #s 0-6
        String response = "";

        // based of the return of the random(), the code will choose a response to respond with
        if (whichResponse == 0)
        {
            response = "Interesting, tell me more.";
        }
        else if (whichResponse == 1)
        {
            response = "Hmmm.";
        }
        else if (whichResponse == 2)
        {
            response = "Do you really think so?";
        }
        else if (whichResponse == 3)
        {
            response = "You don't say.";
        } 
        else if (whichResponse == 4) 
        {
            response = "Really?"; // added response
        }
        else if (whichResponse == 5) {
            response = "I completely agree"; // added response
        }

        return response;
    }


    /**
     * Search for one word in phrase. The search is not case
     * sensitive. This method will check that the given goal
     * is not a substring of a longer string (so, for
     * example, "I know" does not contain "no").
     *
     * @param statement
     *            the string to search
     * @param goal
     *            the string to search for
     * @param startPos
     *            the character of the string to begin the
     *            search at
     * @return the index of the first occurrence of goal in
     *         statement or -1 if it's not found
     */
    private int findKeyword(String statement, String goal, int startPos)
    {
        String phrase = statement.trim();
        // The only change to incorporate the startPos is in the line below
        int position = phrase.toLowerCase().indexOf(goal.toLowerCase(), startPos);

        // Refinement--make sure the goal isn't part of a word
        while (position >= 0)
        {
            // Find the string of length 1 before and after the word
            String before = " ", after = " ";
            if (position > 0)
            {
                before = phrase.substring(position - 1, position).toLowerCase();
            }
            if (position + goal.length() < phrase.length())
            {
                after = phrase.substring(
                        position + goal.length(),
                        position + goal.length() + 1)
                        .toLowerCase();
            }

            // If before and after aren't letters, we've found the goal word
            if (((before.compareTo("a") < 0) || (before.compareTo("z") > 0)) // before is not a letter
                  && ((after.compareTo("a") < 0) || (after.compareTo("z") > 0)))
            {
                return position;
            }

            // The last position didn't work, so let's find
            // the next, if there is one.
            position = phrase.indexOf(goal.toLowerCase(), position + 1);
        }

        return -1; // returns -1 if word is not found, meaning the keyword was not typed
    }

    /**
     * Search for one word in phrase. The search is not case
     * sensitive. This method will check that the given goal
     * is not a substring of a longer string (so, for
     * example, "I know" does not contain "no"). The search
     * begins at the beginning of the string.
     *
     * @param statement
     *            the string to search
     * @param goal
     *            the string to search for
     * @return the index of the first occurrence of goal in
     *         statement or -1 if it's not found
     */
    private int findKeyword(String statement, String goal)
    {
        return findKeyword(statement, goal, 0); // finds if a keyword is within a statement
    }

}
